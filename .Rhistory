age<-age %>% mutate(age = factor(age, levels = c("Under 15", "15-17", "18-19", "20-24", '25-29', '30-34', '35-39', '40-44', 'Over 44')))
library(tidyverse)
library(tidycensus)
library(sf)
library(readxl)
library(rio)
library(tidyr)
library(highcharter)
library(leaflet)
library(reshape2)
library(lubridate)
library(purrr)
library(readr)
library(cpaltemplates)
library(DT)
libDB <- "/Users/Michael/CPAL Dropbox"
parklandDir <- "/Maternal Health/02_Data/Parkland Family Planning/reexternalreparklanddatareport"
parklandFiles <- list.files(path = paste0(libDB, parklandDir), pattern = "*.xls", full.names = TRUE)
age<-read_csv('data/age.csv', show_col_types = FALSE)
race<-read_csv('data/race.csv', show_col_types = FALSE)
zip<-read_csv('data/zip.csv', show_col_types = FALSE)
payor<-read_csv('data/payor.csv', show_col_types = FALSE)
method<-read_csv('data/method.csv', show_col_types = FALSE)
titleX<-read_csv('data/titleX.csv', show_col_types = FALSE)
larc<-read_csv('data/larc.csv', show_col_types = FALSE)
age<-age %>% mutate(age = factor(age, levels = c("Under 15", "15-17", "18-19", "20-24", '25-29', '30-34', '35-39', '40-44', 'Over 44')))
age<-age[order(age$age),]
ageChart <- highchart() %>%
hc_xAxis(categories = unique(age$age),
labels = list(formatter = JS("function() {
return this.value.toLocaleString();
}"))) %>%hc_yAxis(reversedStacks=FALSE) %>%
hc_add_series(data = age, type = "bar", hcaes(x = age, y = total, group = quarter)) %>%
hc_chart(type = "bar") %>%
hc_plotOptions(bar = list(stacking = "normal"))%>%
hc_tooltip(formatter = JS("function() {
let age = this.point.age;
let count = this.point.y.toLocaleString();
let percent = this.point.percent.toFixed(1) + '%';
return '<b>Age Group: </b>' + age + '<br>' +
'<b>Count: </b>' + count + '<br>' +
'<b>Percent: </b>' + percent;
}")) %>%
hc_colors(palette_cpal_main)%>%
hc_title(text='Family Planning Clinic Visits by Age Group')
ageChart
ageChart <- highchart() %>%
hc_xAxis(categories = unique(age$age)) %>%
hc_yAxis(reversedStacks=FALSE) %>%
hc_add_series(data = age, type = "bar", hcaes(x = age, y = total, group = quarter)) %>%
hc_chart(type = "bar") %>%
hc_plotOptions(bar = list(stacking = "normal"))%>%
hc_tooltip(formatter = JS("function() {
let age = this.point.age;
let count = this.point.y.toLocaleString();
let percent = this.point.percent.toFixed(1) + '%';
return '<b>Age Group: </b>' + age + '<br>' +
'<b>Count: </b>' + count + '<br>' +
'<b>Percent: </b>' + percent;
}")) %>%
hc_colors(palette_cpal_main)%>%
hc_title(text='Family Planning Clinic Visits by Age Group')
ageChart
library(tidyverse)
library(tidycensus)
library(sf)
library(readxl)
library(rio)
library(tidyr)
library(highcharter)
library(leaflet)
library(reshape2)
library(lubridate)
library(purrr)
library(readr)
library(cpaltemplates)
library(DT)
libDB <- "/Users/Michael/CPAL Dropbox"
parklandDir <- "/Maternal Health/02_Data/Parkland Family Planning/reexternalreparklanddatareport"
parklandFiles <- list.files(path = paste0(libDB, parklandDir), pattern = "*.xls", full.names = TRUE)
age<-read_csv('data/age.csv', show_col_types = FALSE)
race<-read_csv('data/race.csv', show_col_types = FALSE)
zip<-read_csv('data/zip.csv', show_col_types = FALSE)
payor<-read_csv('data/payor.csv', show_col_types = FALSE)
method<-read_csv('data/method.csv', show_col_types = FALSE)
titleX<-read_csv('data/titleX.csv', show_col_types = FALSE)
larc<-read_csv('data/larc.csv', show_col_types = FALSE)
age<-age%>%filter(age!='Total')%>%
group_by(age, quarter)%>%
summarise(total=sum(total))%>%
mutate(catTotal=sum(total), percent=round(total/catTotal*100, 2))
teensCount <- age %>%
filter(age %in% c('15-17', '18-19')) %>%
pull(total) %>%
sum()
overview<-data.frame(Year='2023',
`Total Clinic Visits` = scales::number(sum(age$total), big.mark=','),
LARC = scales::number(nrow(larc), big.mark=','),
Teens = scales::number(teensCount, big.mark=',')
)
datatable(overview, options = list(paging = FALSE,
searching = FALSE,
info = FALSE
),
rownames = FALSE) %>%
formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>%
formatStyle(columns = colnames(.), fontFamily = "Poppins")
age<-age %>% mutate(age = factor(age, levels = c("Under 15", "15-17", "18-19", "20-24", '25-29', '30-34', '35-39', '40-44', 'Over 44')))
age<-age[order(age$age),]
ageChart <- highchart() %>%
hc_xAxis(categories = unique(age$age),
labels = list(formatter = JS("function() {
return this.value.toLocaleString();
}"))) %>%
hc_yAxis(reversedStacks=FALSE) %>%
hc_add_series(data = age, type = "bar", hcaes(x = age, y = total, group = quarter)) %>%
hc_chart(type = "bar") %>%
hc_plotOptions(bar = list(stacking = "normal"))%>%
hc_tooltip(formatter = JS("function() {
let age = this.point.age;
let count = this.point.y.toLocaleString();
let percent = this.point.percent.toFixed(1) + '%';
return '<b>Age Group: </b>' + age + '<br>' +
'<b>Count: </b>' + count + '<br>' +
'<b>Percent: </b>' + percent;
}")) %>%
hc_colors(palette_cpal_main)%>%
hc_title(text='Family Planning Clinic Visits by Age Group')
ageChart
ageChart <- highchart() %>%
#  hc_xAxis(categories = unique(age$age)) %>%
hc_xAxis(categories = unique(age$age),
labels = list(formatter = JS("function() { return Highcharts.numberFormat(this.value, 0, '', ','); }")))
ageChart <- highchart() %>%
#  hc_xAxis(categories = unique(age$age)) %>%
hc_xAxis(categories = unique(age$age),
labels = list(formatter = JS("function() { return Highcharts.numberFormat(this.value, 0, '', ','); }"))) %>%
hc_yAxis(reversedStacks=FALSE) %>%
hc_add_series(data = age, type = "bar", hcaes(x = age, y = total, group = quarter)) %>%
hc_chart(type = "bar") %>%
hc_plotOptions(bar = list(stacking = "normal"))%>%
hc_tooltip(formatter = JS("function() {
let age = this.point.age;
let count = this.point.y.toLocaleString();
let percent = this.point.percent.toFixed(1) + '%';
return '<b>Age Group: </b>' + age + '<br>' +
'<b>Count: </b>' + count + '<br>' +
'<b>Percent: </b>' + percent;
}")) %>%
hc_colors(palette_cpal_main)%>%
hc_title(text='Family Planning Clinic Visits by Age Group')
ageChart
ageChart <- highchart() %>%
hc_xAxis(categories = unique(age$age)) %>%
hc_yAxis(reversedStacks=FALSE) %>%
hc_add_series(data = age, type = "bar", hcaes(x = age, y = total, group = quarter)) %>%
hc_chart(type = "bar") %>%
hc_plotOptions(bar = list(stacking = "normal"))%>%
hc_tooltip(formatter = JS("function() {
let age = this.point.age;
let count = this.point.y.toLocaleString();
let percent = this.point.percent.toFixed(1) + '%';
return '<b>Age Group: </b>' + age + '<br>' +
'<b>Count: </b>' + count + '<br>' +
'<b>Percent: </b>' + percent;
}")) %>%
hc_colors(palette_cpal_main)%>%
hc_title(text='Family Planning Clinic Visits by Age Group')
ageChart
raceCopy<- race %>%
group_by(date) %>%
summarise(non_hispanic=sum(hispanic), race='Hispanic')
race<-race%>% select(-hispanic, -undup_totals)%>%bind_rows(raceCopy)%>%
mutate(race = case_when(race %in% c("American Indian", "Pacific Islander", "Mixed", "Pacific Islander", "Unknown", "Unknown/Not Reported", "More than one Race") ~ "Additional Groups",
TRUE ~ race))%>%
group_by(race)%>%summarise(total=sum(non_hispanic))%>%
mutate(percent=round(total/sum(total)*100,2))%>%
filter(race!='Total')
counties <- tigris::counties(state = "TX")
View(counties)
dallas <- counties %>%
filter(GEOID == "48113")
#| include: FALSE
zip<-zip %>%
group_by(zip_code, year) %>%
summarize(clients = sum(clients, na.rm = TRUE)) %>%
ungroup() %>%
filter(year == year(today()-years(1))) %>%
rename(GEOID = zip_code)
var <- c("tot_wmn" = "B01001_026")
zctaEst <- get_acs(geography = "zcta",
year = 2022,
variables = var,
output = "wide") %>%
left_join(., zip) %>%
mutate(visitsCap = round(signif((clients/tot_wmnE)*10000, digits =1), 0))
zctaSf <- tigris::zctas(state = "TX",
year = 2010) %>%
transmute(GEOID = ZCTA5CE10,
geometry = geometry) %>%
left_join(., zctaEst) %>%
filter(!is.na(year))
counties <- tigris::counties(state = "TX")
dallas <- counties %>%
filter(GEOID == "48113")
zctaSf <- tigris::zctas(state = "TX",
year = 2010) %>%
transmute(GEOID = ZCTA5CE10,
geometry = geometry) %>%
left_join(., zctaEst) %>%
filter(!is.na(year)) %>%
.[dallas, ]
# Calculate Jenks natural breaks
jenks_breaks <- classInt::classIntervals(zctaSf$visitsCap, n = 5, style = "jenks")
# Get the breaks to use in the color palette
breaks <- signif(jenks_breaks$brks, digits = 1)
# create color palette
color_palette <- colorBin(palette = palette_cpal_magenta, domain = zctaSf$visitsCap, bins = breaks, na.color = "transparent")
# Create Leaflet map
zipChart<-leaflet(data = zctaSf) %>%
addTiles(urlTemplate = cpaltemplates::cpal_mapbox_color) %>%
addPolygons(
fillColor = ~color_palette(visitsCap),
color = "#BDBDC3",
weight = 1,
opacity = 1,
fillOpacity = 0.7,
popup = ~paste("Visits per Cap: ", visitsCap)
) %>%
addLegend(pal = color_palette, values = ~visitsCap, opacity = 0.7,
title = "Visits per Cap",
position = "bottomright")
zipChart
